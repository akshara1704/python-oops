#ENCAPSULATION-

Encapsulation is one of the fundamental concepts in object-oriented programming (OOP).
It describes the idea of wrapping data and the methods that work on data within one unit.
This puts restrictions on accessing variables and methods directly and can prevent the accidental modification of data.
To prevent accidental change, an object’s variable can only be changed by an object’s method.
Those types of variables are known as private variables.

A class is an example of encapsulation as it encapsulates all the data that is member functions, variables, etc.
The goal of information hiding is to ensure that an object’s state is always valid by controlling access to attributes
that are hidden from the outside world.

#PROTECTED MEMBERS-

Protected members are those members of the class that cannot be accessed outside the class
but can be accessed from within the class and its subclasses.
To accomplish this in Python, just follow the convention by prefixing the name of the member by a single underscore “_”.

Although the protected variable can be accessed out of the class as well as in the derived class
(modified too in derived class), it is convention not a rule to not access the protected members out of the class body.

Note: The __init__ method is a constructor and runs as soon as an object of a class is instantiated.

#PRIVATE MEMBERS-

Private members are similar to protected members,
the difference is that the class members declared private should neither be accessed outside the class
nor by any base class.
In Python, there is no existence of Private instance variables that cannot be accessed except inside a class.
However, to define a private member prefix the member name with double underscore “__”.